#Pim v0.1 readme

This document works as a development guideline AND a readme. Because most of the 
functionalities described in this document aren't implemented yet.

Pim is a 2D game engine aimed to further improve development for the Windows platform
by providing a simple, yet comprehensive interface that is tailored to accommodate
existing issues within the PC gaming scene.

While most ideas are still notes written on a piece of paper rather than sexy bytes
in a binary, the core principles of Pim are set in stone: Pim doesn't care what 
hardware it runs on. 60x43 resolution screen? No problem. Ancient 4:3 monitor?
Not even a slight challenge. The CPU is powered by a potato? Probably an issue,
but we'll see.

Pim will - semi automatically - handle resolutions, aspect ratios, shader qualities,
particle counts and in general make development for the hardware varying platform
a lot easier. Pim is not a media layer applicable for game development. It is a
game engine.

Pim is 99% standalone (bar some OpenGL addons), and probably always will be.

PLEASE NOTE: Pim will only compile in debug mode currently. Also, it's virtually
uselses. Fonts are not supported, sound is unimplemented, and there are bugs. Many.

#Setup

First of all, download the bin.zip file and place it somewhere you'll remember.

The following command will ease the linking and header paths, but is not required.
	$>setx PIM_HOME <dir_to_pim>

Open Visual Studio, and create a new Console Application. 

Add the following to your C++ header search path:
	$(PIM_HOME)\include

Obviously, replace $(PIM_HOME) with the path if you didn't setx it earlier.

Add the following library search path:
	$(PIM_HOME)\lib

And add the following libraries to your linker input:
	OpenGL32.lib
	glut32.lib
	pim_d.lib			// DEBUG VERSION - use pim.lib for release (which isn't working currently)
	
Some more settings need to be changed in order for the compilation to go as planned.

Go to Project properties -> configuration properties -> C,C++ -> Code Generation 
and change the Runtime Library to "Multi threaded debug (/MTd)"

#Tutorial

This is coming later. Take a look at the Pim_demo project for guidelines.
Note that only the source files for the project is attached. Just following the 
guidelines above and add the files into your project. Remember to put the image
in the working directory - pim_demo/debug/ - where your .exe file is built.