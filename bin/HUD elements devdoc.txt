Functionality requirements of a Pim::Slider

1. 	It MUST have a slider-sprite.
2. 	It must take ownership of passed sprites.
3. 	It must be possible to set the slider boundaries.
4. 	It must be possible to set the return range of the slider (0-1, 1-100, 0-10, etc).
5. 	Virtual methods for "slider reached bottom" and "slider reached top" must exist.
6. 	The slider must stay within the bloody range.

-----------

Functionality requirements of a Pim::Button

1. 	It must have 4 possible states:
	-	Normal				(default)
	- 	Hovered				(activated)
	- 	Pressed 			(down)
	-	Deactivated			(gray)
2. 	Subclasses must be able to override the "isHovered" method (circle or rect, etc).
3. 	It must take ownership of the passed sprites.
4. 	Sprites must be interchangeable 
	-	Button::setActivatedSprite(Sprite *new, bool deleteOld); etc.
5.	It must implement a callback system.
	- If no callback object is set, call overrideable methods.
6.  Private, overrideable methods for setting the selected type of sprite.
	-	void Button::setActivatedSprite() -> by default, if an "activated sprite"
		exists, this is set to be the current sprite. Overriding it may merely change
		the color of the currently selected sprite.


Looking at the requirements I've set for the two UI-classes leads be to believe that
GameNode would be the best superclass for both classes. They have nothing in common 
which can be inherited from a common UI-superclass.